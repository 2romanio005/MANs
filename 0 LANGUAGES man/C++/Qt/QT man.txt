M/V	модуль - подмодель MVC
	View (Представление)									- отображение, визуальный интерфейс
	Model (Модель)											- абстракция над данными, и некоторая логика их обработки
	Делегаты (Delegate)										- обработка пользовательского ввода
	https://metanit.com/cpp/qt/7.1.php


	
public slots:												- пишется как модификатор доступа. Определяет метод класса как слот, который будет вызываться сигналами
signals:													- пишется как модификатор доступа. Определяем сигнатуру сигнала, будем вызывать его при помощи emit
emit														- макрос вызова сигнала, а посути вызова всех привязанных к нему слотов
QObject::connect()											- привязываем сигнал к слоту
https://metanit.com/cpp/qt/6.1.php


===================================================================== С++ QT =====================================================================

Q_OBJECT													- макрос, пишем как поле класса, чтобы в нём можно было определять сигнаы и слоты 

Q_GADGET													- макрос, пишем как поле класса, теперь класс можно исползовать из QML позволяет испольщовать: Q_PROPERTY, Q_INVOKABLE, Q_ENUM без наследования от QObkect. Но не будте сигналов и слотов
https://habr.com/ru/articles/307816/

Q_INVOKABLE													- макрос, пишем переде функцией, чтобы её можно быо вызывать из QML
https://metanit.com/cpp/qt/5.2.php


Q_PROPERTY(тип_свойства имя_свойства READ метод_получения WRITE метод_изменения NOTIFY сигнал_изменения)			- макрос для отределение свойства QML элемента в с++ классе, 3 соответствующие функции позволяют полностью с ним взаимодействовать из QML, они будут вызываться неявно
https://metanit.com/cpp/qt/6.7.php


Q_DECLARE_METATYPE








qmlRegisterType<Counter>("counter", 1, 0,"Counter");		- регистрация типа Counter для QML, который будет пдключаться так: import counter
https://metanit.com/cpp/qt/5.2.php


====================================================================== QML ========================================================================

property тип_свойства PropertyName: значение				- создание нового свойства у QML элемента, его тоже можно использовать в привязке данны: если обновится подобное свойство, то обновятся и все привязанные к нему свойства. Будет неявно вызываться обработчик сигнал "on[PropertyName]Changed"
https://metanit.com/cpp/qt/6.6.php







MouseArea													- область, подверженная перетаскиванию
DropArea													- область, которая выдаёт сигналы при входе и выходет из неё перетаскиваемого объекта
https://metanit.com/cpp/qt/6.8.php


reuseItems													- свойство отображений, позволяет повторное использовать ранее использованные элементы, когда они исчезают из поля зрения при прокрутке
конец https://metanit.com/cpp/qt/4.10.php